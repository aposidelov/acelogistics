<?php

define('CANCELLATION_NA', '');
//define('CANCELLATION_12HOURS_NOTICE', 1);
//define('CANCELLATION_24HOURS_NOTICE', 2);
define('CANCELLATION_NORMAL', 4);
define('CANCELLATION_24HOURS_LESS_NOTICE', 12);
define('CANCELLATION_12HOURS_LESS_NOTICE', 13);
define('BOOKOFF_DAILY_CREWS_COUNT', 5);

/**
 * Implements hook_update_6001().
 */
function op_custom_update_6001() {
  $fields = array(
    'field_supp_0to4_client_single', 
    'field_supp_0to4_crew_single', 
    'field_supp_5to8_client_single', 
    'field_supp_5to8_crew_single', 
    'field_supp_9to12_client_single', 
    'field_supp_9to12_crew_single', 
    'field_supp_12plus_client_single', 
    'field_supp_12plus_crew_single', 
    'field_supp_single_payment'
  );
  $table_name = 'content_type_supplements';

  foreach ($fields as $int_field_name) {
    acecrew_update_cck_field_type($int_field_name, $table_name);
  }

  drupal_set_message(t('Single Supplements fields have been updated to decimal'));
}

/**
 * Implements hook_update_6002().
 */
function op_custom_update_6002() {
  $fields = array(
    'field_supp_0to4_client_hour', 
    'field_supp_0to4_crew_hour', 
    'field_supp_5to8_client_hour', 
    'field_supp_5to8_crew_hour', 
    'field_supp_9to12_client_hour', 
    'field_supp_9to12_crew_hour', 
    'field_supp_12plus_client_hour', 
    'field_supp_12plus_crew_hour', 
    'field_supp_per_hour'
  );
  $table_name = 'content_type_supplements';

  foreach ($fields as $int_field_name) {
    acecrew_update_cck_field_type($int_field_name, $table_name);
  }

  drupal_set_message(t('Per Hour Supplements fields have been updated to decimal'));
}

/**
 * Implements hook_update_6003().
 */
function op_custom_update_6003() {
  $ret = array();
  
  acecrew_update_cck_field_type(
    'field_session_job_nid',
    'content_type_job_session', 
    'integer', 
    'field_job_number'
  );
  db_add_index($ret, 'content_type_job_session', 'job_id', array('field_session_job_nid_value'));
  // content_type_job - client_id
  acecrew_update_cck_field_type(
    'field_job_client_name',
    'content_type_job',
    'integer', 
    'field_job_number'
  );
  db_add_index($ret, 'content_type_job', 'client', array('field_job_client_name_value'));
  // content_type_job - venue_id
  acecrew_update_cck_field_type(
    'field_job_venue',
    'content_type_job', 
    'integer', 
    'field_job_number'
  );
  db_add_index($ret, 'content_type_job', 'venue', array('field_job_venue_value'));  
  // content_type_client - field_client_id
  db_add_index($ret, 'content_type_client', 'field_client_id_value', array('field_client_id_value'));
  // content_type_venue - field_venue_id
  db_add_index($ret, 'content_type_venue', 'field_venue_id_value', array('field_venue_id_value'));
  
  db_add_index($ret, 'acecrew_job_invoices', 'job_id', array('job_id'));  
  db_add_index($ret, 'crew_call', 'uid', array('uid'));
  db_add_index($ret, 'crew_call', 'jsid', array('jsid'));
  db_add_index($ret, 'crew_call', 'uid_jsid', array('uid','jsid'));
  db_add_index($ret, 'crew_js_supplement', 'jsid', array('jsid'));
  db_add_index($ret, 'crew_js_supplement', 'uid_jsid', array('uid','jsid'));

  return $ret;
}

/**
 * Implements hook_update_6004().
 */
function op_custom_update_6004() {
  $ret = array();
  
  acecrew_update_cck_field_type(
    'field_client_id',
    'content_type_client', 
    'serial', 
    'field_ser_test'
  );
  acecrew_update_cck_field_type(
    'field_venue_id',
    'content_type_venue', 
    'integer', 
    'field_ser_test'
  );
  
  return $ret;
}

/**
 * Implements hook_init().
 */
function op_custom_init() {
  if (arg(0) == 'user' && arg(2) == 'edit' && arg(3) == 'Supplement') {
    $a0 = arg(0);
    $a1 = arg(1);
    $a2 = arg(2);
    drupal_goto($a0.'/'.$a1.'/'.$a2.'/CrewSupplement');
  }  

  if (arg(0) == 'node') {
    drupal_add_js(drupal_get_path('module', 'acecrew').'/theme/jquery.blockui.js');
  }
}

/**
 * Implements hook_menu().
 */
function op_custom_menu() {
  $items = array();
  $items['jobs/venue/autocomplete/%'] = array(
    'page callback' => 'op_jobs_venue_autocomplete',
    'page arguments' => array(3),
    'access arguments' => array('admin content'),
    'type' => MENU_CALLBACK,
  );
  $items['jobs/venue/form'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('op_custom_jobs_venue_form'),
    'access arguments' => array('administer nodes'),
    'type' => MENU_CALLBACK,
  );
  $items['jobs/client/form'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('op_custom_jobs_client_form'),
    'access arguments' => array('admin content'),
    'type' => MENU_CALLBACK,
  );
  $items['crews/bookoff/repeat-form'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('op_custom_bookoff_repeat_form'),
    'access arguments' => array('admin content'),
    'file' => 'op_custom.forms.inc',
    'type' => MENU_CALLBACK,
  );
  $items['acecrew/ajax/checkbookoff/%'] = array(
    'title' => 'Acecrew Check Bookoff Date Ajax',
    'page callback' => 'acecrew_ajax_check_bookoff_by_date',
    'page arguments' => array(3),
    'access arguments' => array('create user_bookedoff content'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/admin-settings/cck-add'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('op_custom_admin_settins_cck_form'),
    'access arguments' => array('admin content'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'op_custom.admin_settings.inc',
    'title' => 'Add crew rate',
  );

  $items['admin/cck-field-type/update'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('op_custom_field_type_update_form'),
    'access arguments' => array('admin content'),
    'type' => MENU_CALLBACK,
    'file' => 'op_custom.field_type_update.inc',
    'title' => 'CCK Field Type Update',
  );

  $items['admin/invoice-update'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('op_custom_invoice_update_form'),
    'access arguments' => array('admin content'),
    'type' => MENU_NORMAL_ITEM,    
    'title' => 'Invoice update',
  );

  $items['admin/invoice-update/popup/%'] = array(
    'title' => 'Test Popup',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('op_custom_invoice_update_popup_form', 3),
    'access arguments' => array('admin content'),
    'type' => MENU_CALLBACK,
  );

  $items['crew-listing'] = array(
    'page callback' => 'drupal_get_form',    
    'page arguments' => array('op_custom_crew_listing_form'),
    'access arguments' => TRUE,
    'type' => MENU_CALLBACK,    
    'title' => 'Crew listing',
    'file' => 'op_custom.crew_listing.inc',
  );

  $items['jobs-all'] = array(
    'page callback' => 'drupal_get_form',    
    'page arguments' => array('op_custom_job_listing_form'),
    'access arguments' => TRUE,
    'type' => MENU_CALLBACK,    
    'title' => 'Jobs All',
    'file' => 'op_custom.job_listing.inc',
  );

  $items['jobs-timezone'] = array(
    'page callback' => 'drupal_get_form',    
    'page arguments' => array('op_custom_job_timezone_listing_form'),
    'access arguments' => TRUE,
    'type' => MENU_CALLBACK,    
    'title' => 'Jobs with Timezones',
    'file' => 'op_custom.job_timezone_listing.inc',
  );
  
  $items['admin/settings/allocate_skills'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('op_custom_allocate_skills_form'),
    'access arguments' => TRUE,
    'type' => MENU_CALLBACK,    
  );

  $items['admin/ajax/client-account/%'] = array(
    'page callback' => 'op_custom_ajax_client_account',
    'page arguments' => array(3),
    'access arguments' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/ajax/client-nid-by-name/%'] = array(
    'page callback' => 'op_custom_ajax_client_id_by_name',
    'page arguments' => array(3),
    'access arguments' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/ajax/client-comment/%/%'] = array(
    'page callback' => 'op_custom_ajax_client_comment',
    'page arguments' => array(3,4),
    'access arguments' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/ajax/venue-comment/%/%'] = array(
    'page callback' => 'op_custom_ajax_venue_comment',
    'page arguments' => array(3,4),
    'access arguments' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/ajax/client-call-crew-is-blocked/%/%'] = array(
    'page callback' => 'op_custom_ajax_client_call_is_blocked_crew',
    'page arguments' => array(3,4),
    'access arguments' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/ajax/venue-call-crew-is-blocked/%/%'] = array(
    'page callback' => 'op_custom_ajax_venue_call_is_blocked_crew',
    'page arguments' => array(3,4),
    'access arguments' => TRUE,
    'type' => MENU_CALLBACK,
  );  
  
  return $items;
}


/**
 * Implements hook_rules_action_info().
 */
function op_custom_rules_action_info() {
  $actions = array();

  $actions['acercrew_rule_call_crews_status_revert'] = array(
    'label' => t('Acecrew: revert statuses of Call crews'),
    'arguments' => array(
      'call' => array(
        'type' => 'node',
        'label' => 'Call',
      ),
    ),
    'module' => 'Acecrew Custom'
  );

  $actions['acercrew_rule_job_crews_status_revert'] = array(
    'label' => t('Acecrew: revert statuses of Job crews'),
    'arguments' => array(
      'job' => array(
        'type' => 'node',
        'label' => 'Job',
      ),
    ),
    'module' => 'Acecrew Custom'
  );

  return $actions;
}

function op_custom_readonly_after_build($form, &$form_state) {                           
  $field = 'field_job_number';                                         
  $form[$field][0]['value']['#attributes']['readonly'] = 'readonly';          
  $form_state['values'][$field][0]['value'] = $form[$field]['#default_value']['value'];
  return $form;                                                               
}

function op_custom_call_before_submit($form, &$form_state) {   
  $job_nid = $form_state['values']['field_session_job_nid'][0]['value'];
  $client_id = acecrew_get_client_id_by_job_id($job_nid);
  $client_nid = acecrew_get_client_nid_by_client_id($client_id);
  variable_set('acecrew_client_locked_'.$client_nid, TRUE);  
}

function op_custom_call_after_submit($form, &$form_state) {   
  $job_nid = $form_state['values']['field_session_job_nid'][0]['value'];
  $client_id = acecrew_get_client_id_by_job_id($job_nid);
  $client_nid = acecrew_get_client_nid_by_client_id($client_id);
  variable_set('acecrew_client_locked_'.$client_nid, FALSE);  
}

function op_custom_job_before_submit($form, &$form_state) {     
  $client_id = $form_state['values']['field_job_client_name'][0]['value'];
  $client_nid = acecrew_get_client_nid_by_client_id($client_id);
  variable_set('acecrew_client_locked_'.$client_nid, TRUE);  
}

function op_custom_job_after_submit($form, &$form_state) {     
  $client_id = $form_state['values']['field_job_client_name'][0]['value'];
  $client_nid = acecrew_get_client_nid_by_client_id($client_id);
  variable_set('acecrew_client_locked_'.$client_nid, FALSE);  
}

/**
 * Implements hook_form_alter().
 */
function op_custom_form_alter(&$form, &$form_state, $form_id) {  
  if ($form_id == 'views_exposed_form' && isset($form_state['view'])) {
    if ($form_state['view']->name == 'call_search') {
      // add extra statuses
      $form['field_job_status_value_many_to_one']['#options']['tbi'] = t('To be invoiced');
      $form['field_job_status_value_many_to_one']['#options']['tbc'] = t('To be confirmed');
    } elseif ($form_state['view']->name == 'job_view') {
      // add extra statuses
      $form['field_job_status_value_many_to_one']['#options']['tbi'] = t('To be invoiced');
    }
  } elseif ($form_id == 'client_node_form') {    
    drupal_add_js(drupal_get_path('module', 'op_custom').'/js/client.js');

    $form['buttons']['submit']['#submit'][0] = 'op_custom_client_before_submit';
    $form['buttons']['submit']['#submit'][1] = 'node_form_submit';
    $form['buttons']['submit']['#submit'][2] = 'op_custom_client_after_submit';    

    $form['buttons']['duplicate'] = array('#type' => 'submit', '#value' => 'Save & Duplicate Venue', '#weight' => 10);
    $form['buttons']['duplicate']['#submit'][0] = 'op_custom_client_before_submit';
    $form['buttons']['duplicate']['#submit'][1] = 'node_form_submit';
    $form['buttons']['duplicate']['#submit'][2] = 'op_custom_client_after_submit'; 
    $form['buttons']['duplicate']['#submit'][3] = 'op_custom_client_duplicate_venue_submit';  
  } elseif ($form_id == 'job_node_form') {    
    drupal_add_js(drupal_get_path('module', 'op_custom').'/js/job.js');    
    //$form['field_job_number'][0]['value']['#attributes']['readonly'] = 'readonly';
    if (!empty($form['nid']['#value'])) {
      $form['#after_build'][] = 'op_custom_readonly_after_build';
    } 

    $form['buttons']['submit']['#submit'][0] = 'op_custom_job_before_submit';
    $form['buttons']['submit']['#submit'][1] = 'node_form_submit';
    $form['buttons']['submit']['#submit'][2] = 'op_custom_job_after_submit';   
    //watchdog('ffdd', '<pre>'.print_r($form_state['values'], TRUE).'</pre>');
    //$form['field_job_number'][0]['#disabled'] = TRUE;
    //$form['field_job_number']['#attributes'] = array('disabled' => 'disabled');
  } elseif ($form_id == 'job_session_node_form') {  
      drupal_add_js(drupal_get_path('module', 'acecrew').'/theme/jquery.blockui.js');     
      $form['buttons']['submit']['#submit'][0] = 'op_custom_call_before_submit';
      $form['buttons']['submit']['#submit'][1] = 'node_form_submit';
      $form['buttons']['submit']['#submit'][2] = 'op_custom_call_after_submit';
      $form['buttons']['submit']['#submit'][3] = 'acecrew_call_close_dialog_submit';
      $form['buttons']['submit']['#submit'][4] = 'ajax_submitter';      
      $form['buttons']['submit']['#submit'][5] = 'op_custom_call_duplicate_submit';
      
      /*$form['buttons']['submit']['#submit'][0] = 'node_form_submit';
      $form['buttons']['submit']['#submit'][1] = 'acecrew_call_close_dialog_submit';
      $form['buttons']['submit']['#submit'][2] = 'ajax_submitter';
      $form['buttons']['submit']['#submit'][3] = 'op_custom_call_duplicate_submit';*/      
      
      $form['duplications'] = array(
        '#type' => 'select',
        '#title' => t('Duplications by Days (optional)'),
        '#default_value' => 0,
        '#weight' => 34,
        '#options' => array(
          0 => 'No Duplications',
          1 => 1,
          2 => 2,
          3 => 3,
          4 => 4,
          5 => 5,
          6 => 6,
          7 => 7,
          8 => 8,
          9 => 9,
          10 => 10,
        ),
      );      
  } elseif ($form_id == 'user_bookedoff_node_form') {
    drupal_add_js(drupal_get_path('module', 'op_custom') . '/js/bookoff.js');
    $form['title']['#access'] = 0;
    $form['revision_information']['#access'] = 0;
    $form['author']['#access'] = 0;
    $form['options']['#access'] = 0;
    $form['comment_settings']['#access'] = 0;
    $form['menu']['#access'] = 0;
    $form['path']['#access'] = 0;    
  }
}

function op_custom_call_duplicate_submit($form, &$form_state) {
  //watchdog('dupl_f2', '<pre>'.print_r($form_state, TRUE).'</pre>');
  $duplications = $form_state['values']['duplications'];  

  if (!$duplications) {
    return;
  }

  $call = $form_state['node'];  
  $call_obj = (object)$form_state['node'];
  unset($call_obj->created);
  unset($call_obj->changed);
  unset($call_obj->vid);
  unset($call_obj->op);
  unset($call_obj->submit);
  unset($call_obj->preview_changes);
  unset($call_obj->form_build_id);
  unset($call_obj->form_token);
  unset($call_obj->form_id);
  unset($call_obj->comment);
  unset($call_obj->menu);
  unset($call_obj->path);
  unset($call_obj->pid);
  unset($call_obj->pathauto_perform_alias);
  unset($call_obj->old_alias);  
  unset($call_obj->content_lock_old_format);
  unset($call_obj->duplications);  
  unset($call_obj->print_display);
  unset($call_obj->print_display_comment);  
  unset($call_obj->print_display_urllist);
  unset($call_obj->teaser_include);  
  unset($call_obj->teaser);
  unset($call_obj->format);  
  unset($call_obj->validated);
  
  //watchdog('$co', '<pre>'.print_r($call_obj, TRUE).'</pre>');
  //watchdog('$co', '<pre>'.print_r($call_obj->field_job_session_date_time[0]['value'], TRUE).'</pre>');
  //watchdog('$co1', '<pre>'.print_r($call_obj->field_job_session_date_time[0]['value'], TRUE).'</pre>');
  //watchdog('$co2', '<pre>'.print_r($call_obj->field_job_session_date_time[0]['timezone'], TRUE).'</pre>');
  //node
  $date = date_make_date($call_obj->field_job_session_date_time[0]['value'], $call_obj->field_job_session_date_time[0]['timezone']);  
  $job_id = $call_obj->field_session_job_nid[0]['value'];
  for ($days = 1; $days <= $duplications; $days++) {    
    date_modify($date, '+1 days');
    $updated_date = date_format($date, 'Y-m-d H:i:s');    
    if (!acecrew_is_call_exists($job_id, $updated_date)) {      
      $call_obj->field_job_session_date_time[0]['value'] = $updated_date;
      $call_obj->field_job_session_date_time[0]['value2'] = $updated_date;
      $call_obj->nid = '';
      $call_obj->vid = '';
      $call_obj->is_new = TRUE; 
      $max_call_data = acecrew_get_max_call_parsed_by_jobid($job_id);
      $call_obj->field_session_callid[0]['value'] = $max_call_data['job_number'].'-'.($max_call_data['max'] + 1);      
      node_save($call_obj);
    }
  }  
}

function op_custom_call_cancel_submit($form, &$form_state) {  
  $nid = $form_state['values']['nid'];
  $node = node_load($nid);
  $node->status = !$form_state['values']['status'];
  node_save($node);
}

/**
 * Implements hook_views_query_alter().
 */
function op_custom_views_query_alter(&$view, &$query) {
  //dsm($view->name);
  if ($view->name == 'job_view') {
    //watchdog('wwd', '<pre>'.print_r($query, TRUE).'</pre>');
    $query->table_queue = array();
    $query->table_queue['node'] = array(
      'alias' => 'node',
      'table' => 'node',
      'relationship' => 'node',
      'join' => '',
    );

    $query->table_queue['job'] = array(
      'alias' => 'job',
      'table' => 'job',
      'relationship' => 'node',
      'num' => 1,
      'join' => new views_join(),
    );
    $query->table_queue['job']['join']->definition['table'] = 'content_type_job';
    $query->table_queue['job']['join']->definition['left_table'] = 'node';
    $query->table_queue['job']['join']->definition['field'] = 'nid';
    $query->table_queue['job']['join']->definition['left_field'] = 'nid';
    $query->table_queue['job']['join']->extra_type = 'AND';
    $query->table_queue['job']['join']->table = 'content_type_job';
    $query->table_queue['job']['join']->left_table = 'node';
    $query->table_queue['job']['join']->left_field = 'nid';
    $query->table_queue['job']['join']->field = 'nid';
    $query->table_queue['job']['join']->type = 'INNER';
    $query->table_queue['job']['join']->adjusted = 1;
    /*
    $query->table_queue['node_revisions'] = array(
      'alias' => 'node_revisions',
      'table' => 'node_revisions',
      'relationship' => 'node',
      'num' => 1,
      'join' => new views_join(),
    );
    $query->table_queue['node_revisions']['join']->definition['table'] = 'node_revisions';
    $query->table_queue['node_revisions']['join']->definition['left_table'] = 'node';
    $query->table_queue['node_revisions']['join']->definition['field'] = 'vid';
    $query->table_queue['node_revisions']['join']->definition['left_field'] = 'vid';
    $query->table_queue['node_revisions']['join']->extra_type = 'AND';
    $query->table_queue['node_revisions']['join']->table = 'node_revisions';
    $query->table_queue['node_revisions']['join']->left_table = 'node';
    $query->table_queue['node_revisions']['join']->left_field = 'vid';
    $query->table_queue['node_revisions']['join']->field = 'vid';
    $query->table_queue['node_revisions']['join']->type = 'INNER';
    $query->table_queue['node_revisions']['join']->adjusted = 1;
    */
    $query->table_queue['aji'] = array(
      'alias' => 'aji',
      'table' => 'aji',
      'relationship' => 'node',
      'num' => 1,
      'join' => new views_join(),
    );
    $query->table_queue['aji']['join']->definition['table']      = 'acecrew_job_invoices';
    $query->table_queue['aji']['join']->definition['left_table'] = 'content_type_job';
    $query->table_queue['aji']['join']->definition['field']      = 'job_id';
    $query->table_queue['aji']['join']->definition['left_field'] = 'field_job_number_value';
    $query->table_queue['aji']['join']->extra_type               = 'AND';
    $query->table_queue['aji']['join']->table                    = 'acecrew_job_invoices';
    $query->table_queue['aji']['join']->left_table               = 'job';
    $query->table_queue['aji']['join']->left_field               = 'field_job_number_value';
    $query->table_queue['aji']['join']->field                    = 'job_id';
    $query->table_queue['aji']['join']->type                     = 'LEFT';
    $query->table_queue['aji']['join']->adjusted                 = 1;

    $query->tables['node'] = array(
      'node' => array(
        'count' => 1,
        'alias' => 'node',
      ),
      'job' => array(
        'count' => 1,
        'alias' => 'job',
      ),
      /*'node_revisions' => array(
        'count' => 1,
        'alias' => 'node_revisions',
      ),*/
      'aji' => array(
        'count' => 1,
        'alias' => 'aji',
      ),
    );

    $query->fields = array();
    $query->fields['nid'] = array(
      'field' => 'nid',
      'table' => 'node',
      'alias' => 'nid',
    );
    $query->fields['job_field_job_number_value'] = array(
      'field' => 'field_job_number_value',
      'table' => 'job',
      'alias' => 'job_field_job_number_value',
    );
    $query->fields['node_type'] = array(
      'field' => 'type',
      'table' => 'node',
      'alias' => 'node_type',
    );
    $query->fields['node_vid'] = array(
      'field' => 'vid',
      'table' => 'node',
      'alias' => 'node_vid',
    );
    $query->fields['job_field_job_status_value'] = array(
      'field' => 'field_job_status_value',
      'table' => 'job',
      'alias' => 'job_field_job_status_value',
    );
    $query->fields['job_field_job_venue_value'] = array(
      'field' => 'field_job_venue_value',
      'table' => 'job',
      'alias' => 'job_field_job_venue_value',
    );
    $query->fields['job_field_job_date_value'] = array(
      'field' => 'field_job_date_value',
      'table' => 'job',
      'alias' => 'job_field_job_date_value',
    );
    $query->fields['job_field_job_client_name_value'] = array(
      'field' => 'field_job_client_name_value',
      'table' => 'job',
      'alias' => 'job_field_job_client_name_value',
    );
    $query->fields['node_uid'] = array(
      'field' => 'uid',
      'table' => 'node',
      'alias' => 'node_uid',
    );

    $query->fields['first_call_date'] = array(
      'field' => '(SELECT UNIX_TIMESTAMP(MIN(js.field_job_session_date_time_value)) FROM `drupal_content_type_job_session` js WHERE js.field_session_job_nid_value = node.nid)',      
      'alias' => 'first_call_date',
    );

    $query->where = array();
    $query->where[0]['clauses'][0] = "node.type in ('%s')";
    $query->where[0]['args'][0] = 'job';
    $query->where[0]['type'] = "AND";
    
    // Status (job) (select list)
    if (isset($_GET['field_job_status_value_many_to_one']) &&
      $_GET['field_job_status_value_many_to_one'] != 'All') {
      // To be invoiced
      if ($_GET['field_job_status_value_many_to_one'] == 'tbi') {
        $query->where[0]['clauses'][] = 'job.field_job_status_value = 1 OR job.field_job_status_value = 3';
        $query->where[0]['args'][] = '';
      }
      /*// To be confirmed
      elseif ($_GET['field_job_status_value_many_to_one'] == 'tbc') {
        $query->where[0]['clauses'][] = 'node_data_field_job_session_date_time.field_call_time_tbc_value = 1 OR node_data_field_job_session_date_time.field_call_hours_tbc_value = 1 OR node_data_field_job_session_date_time.field_call_contract_tbc_value = 1 OR node_data_field_job_session_date_time.field_call_crew_tbc_value = 1';
        $query->where[0]['args'][] = '';
      }*/
      // else statuses
      else {
        $query->where[0]['clauses'][] = 'job.field_job_status_value = %d';
        $query->where[0]['args'][] = $_GET['field_job_status_value_many_to_one'];
      }
    }
    // Job number (job) (textfield)
    if (isset($_GET['field_job_number_value']) && !empty($_GET['field_job_number_value'])) {
      $query->where[0]['clauses'][] = 'job.field_job_number_value = %d';
      $query->where[0]['args'][] = $_GET['field_job_number_value'];
    }
    // Client name (job) (select list)
    if (isset($_GET['field_job_client_name_value_many_to_one']) &&
      $_GET['field_job_client_name_value_many_to_one'] != 'All') {
      $query->where[0]['clauses'][] = 'job.field_job_client_name_value = %d';
      $query->where[0]['args'][] = $_GET['field_job_client_name_value_many_to_one'];
    }
    // Venue (call) (select list)
    if (isset($_GET['field_job_venue_value_many_to_one']) &&
      $_GET['field_job_venue_value_many_to_one'] != 'All') {
      $query->where[0]['clauses'][] = 'job.field_job_venue_value = %d';
      $query->where[0]['args'][] = $_GET['field_job_venue_value_many_to_one'];
    }
    // PO number (job) (textfield)
    if (isset($_GET['field_job_po_number_value']) && !empty($_GET['field_job_po_number_value'])) {
      $query->where[0]['clauses'][] = "job.field_job_po_number_value = '%s'";
      $query->where[0]['args'][] = $_GET['field_job_po_number_value'];
    }
    // Invoice number (custom table) (textfield)
    if (isset($_GET['field_invoice_number_value']) && !empty($_GET['field_invoice_number_value'])) {
      $query->where[0]['clauses'][] = "aji.invoice_number = '%s'";
      $query->where[0]['args'][] = $_GET['field_invoice_number_value'];
    }
    
    // Date picker
    if (isset($_GET['date_filter'])) {
      $min = isset($_GET['date_filter']['min']['date']) ? $_GET['date_filter']['min']['date'] : '';
      $max = isset($_GET['date_filter']['max']['date']) ? $_GET['date_filter']['max']['date'] : '';
      
      if (!empty($min) || !empty($max)) {        
        $query->having[0]['args'] = array();
      }

      if (!empty($min) && !empty($max)) {        
        $query->having[0]['clauses'][] = "DATE_FORMAT(FROM_UNIXTIME(first_call_date), '%Y-%m-%%d') >= '$min' AND DATE_FORMAT(FROM_UNIXTIME(first_call_date), '%Y-%m-%%d') <= '$max'";
      } elseif (!empty($min) && empty($max)) { // ONLY MIN DATE IS SET
        $query->having[0]['clauses'][] = "DATE_FORMAT(FROM_UNIXTIME(first_call_date), '%Y-%m-%%d') >= '$min'";
      } elseif (!empty($max) && empty($min)) {  // ONLY MAX DATE IS SET
        $query->having[0]['clauses'][] = "DATE_FORMAT(FROM_UNIXTIME(first_call_date), '%Y-%m-%%d') <= '$max'";
      }            
      
      

      /*if (!empty($min) && !empty($max)) {
        $query->where['date']['clauses'][] = "DATE_FORMAT(FROM_UNIXTIME(job.field_job_date_value), '%Y-%m-%%d') >= '$min' AND DATE_FORMAT(FROM_UNIXTIME(job.field_job_date_value), '%Y-%m-%%d') <= '$max'";
      } elseif (!empty($min) && empty($max)) { // ONLY MIN DATE IS SET
        $query->where['date']['clauses'][] = "DATE_FORMAT(FROM_UNIXTIME(job.field_job_date_value), '%Y-%m-%%d') >= '$min'";
      } elseif (!empty($max) && empty($min)) {  // ONLY MAX DATE IS SET
        $query->where['date']['clauses'][] = "DATE_FORMAT(FROM_UNIXTIME(job.field_job_date_value), '%Y-%m-%%d') <= '$max'";
      }*/
      /*if (!empty($min) || !empty($max)) {
        $query->where['date']['args'] = array();
        $query->where['date']['type'] = 'AND';
      }*/
    }

    $query->orderby = array('job_field_job_number_value ASC');
    if (isset($_GET['order'])) {
      // Order by Job Number
      if ($_GET['order'] == 'field_job_number_value') {
        if (!isset($_GET['sort']) || $_GET['sort'] == 'asc') {
          $query->orderby = array('job_field_job_number_value ASC');
        } else {
          $query->orderby = array('job_field_job_number_value DESC');
        }
      }
      // Job status
      if ($_GET['order'] == 'field_job_status_value') {
        if (!isset($_GET['sort']) || $_GET['sort'] == 'asc') {
          $query->orderby = array('field_job_status_value ASC');
        } else {
          $query->orderby = array('field_job_status_value DESC');
        }
      }
      //
      if ($_GET['order'] == 'field_job_venue_value') {
        if (!isset($_GET['sort']) || $_GET['sort'] == 'asc') {
          $query->orderby = array('field_job_venue_value ASC');
        } else {
          $query->orderby = array('field_job_venue_value DESC');
        }
      }
      //
      if ($_GET['order'] == 'field_job_date_value') {
        if (!isset($_GET['sort']) || $_GET['sort'] == 'asc') {
          $query->orderby = array('first_call_date ASC');
        } else {
          $query->orderby = array('first_call_date DESC');
        }
      }
      //
      if ($_GET['order'] == 'field_job_client_name_value') {
        if (!isset($_GET['sort']) || $_GET['sort'] == 'asc') {
          $query->orderby = array('field_job_client_name_value ASC');
        } else {
          $query->orderby = array('field_job_client_name_value DESC');
        }
      }
    }   

  }
  elseif ($view->name == 'call_search') {
    $query->table_queue = array();
    $query->table_queue['node'] = array(
      'alias' => 'node',
      'table' => 'node',
      'relationship' => 'node',
      'join' => '',
    );

    $query->table_queue['node_data_field_job_session_date_time'] = array(
      'alias' => 'node_data_field_job_session_date_time',
      'table' => 'node_data_field_job_session_date_time',
      'relationship' => 'node',
      'num' => 1,
      'join' => new views_join(),
    );
    $query->table_queue['node_data_field_job_session_date_time']['join']->definition['table'] = 'content_type_job_session';
    $query->table_queue['node_data_field_job_session_date_time']['join']->definition['left_table'] = 'node';
    $query->table_queue['node_data_field_job_session_date_time']['join']->definition['field'] = 'nid';
    $query->table_queue['node_data_field_job_session_date_time']['join']->definition['left_field'] = 'nid';
    $query->table_queue['node_data_field_job_session_date_time']['join']->extra_type = 'AND';
    $query->table_queue['node_data_field_job_session_date_time']['join']->table = 'content_type_job_session';
    $query->table_queue['node_data_field_job_session_date_time']['join']->left_table = 'node';
    $query->table_queue['node_data_field_job_session_date_time']['join']->left_field = 'nid';
    $query->table_queue['node_data_field_job_session_date_time']['join']->field = 'nid';
    $query->table_queue['node_data_field_job_session_date_time']['join']->type = 'LEFT';
    $query->table_queue['node_data_field_job_session_date_time']['join']->adjusted = 1;

    $query->table_queue['node_data_field_job_number'] = array(
      'alias' => 'node_data_field_job_number',
      'table' => 'node_data_field_job_number',
      'relationship' => 'node',
      'num' => 1,
      'join' => new views_join(),
    );
    $query->table_queue['node_data_field_job_number']['join']->definition['table'] = 'content_type_job';
    $query->table_queue['node_data_field_job_number']['join']->definition['left_table'] = 'content_type_job_session';
    $query->table_queue['node_data_field_job_number']['join']->definition['field'] = 'nid';
    $query->table_queue['node_data_field_job_number']['join']->definition['left_field'] = 'field_session_job_nid_value';
    $query->table_queue['node_data_field_job_number']['join']->extra_type = 'AND';
    $query->table_queue['node_data_field_job_number']['join']->table = 'content_type_job';
    $query->table_queue['node_data_field_job_number']['join']->left_table = 'node_data_field_job_session_date_time';
    $query->table_queue['node_data_field_job_number']['join']->left_field = 'field_session_job_nid_value';
    $query->table_queue['node_data_field_job_number']['join']->field = 'nid';
    $query->table_queue['node_data_field_job_number']['join']->type = 'LEFT';
    $query->table_queue['node_data_field_job_number']['join']->adjusted = 1;

    $query->table_queue['aji'] = array(
      'alias' => 'aji',
      'table' => 'aji',
      'relationship' => 'node',
      'num' => 1,
      'join' => new views_join(),
    );
    $query->table_queue['aji']['join']->definition['table']      = 'acecrew_job_invoices';
    $query->table_queue['aji']['join']->definition['left_table'] = 'content_type_job';
    $query->table_queue['aji']['join']->definition['field']      = 'job_id';
    $query->table_queue['aji']['join']->definition['left_field'] = 'field_job_number_value';
    $query->table_queue['aji']['join']->extra_type               = 'AND';
    $query->table_queue['aji']['join']->table                    = 'acecrew_job_invoices';
    $query->table_queue['aji']['join']->left_table               = 'node_data_field_job_number';
    $query->table_queue['aji']['join']->left_field               = 'field_job_number_value';
    $query->table_queue['aji']['join']->field                    = 'job_id';
    $query->table_queue['aji']['join']->type                     = 'LEFT';
    $query->table_queue['aji']['join']->adjusted                 = 1;

    $query->tables['node'] = array(
      'node' => array(
        'count' => 1,
        'alias' => 'node',
      ),
      'node_data_field_job_number' => array(
        'count' => 1,
        'alias' => 'node_data_field_job_number',
      ),
      'node_data_field_job_session_date_time' => array(
        'count' => 1,
        'alias' => 'node_data_field_job_session_date_time',
      ),
      'aji' => array(
        'count' => 1,
        'alias' => 'aji',
      ),
    );

    $query->fields = array();
    $query->fields['nid'] = array(
      'table' => 'node',
      'field' => 'nid',
      'alias' => 'nid',
    );
    $query->fields['node_data_field_job_session_date_time_field_session_callid_value'] = array(
      'field' => 'field_session_callid_value',
      'table' => 'node_data_field_job_session_date_time',
      'alias' => 'node_data_field_job_session_date_time_field_session_callid_value',
    );

    $query->fields['node_type'] = array(
      'field' => 'type',
      'table' => 'node',
      'alias' => 'node_type',
    );
    $query->fields['node_vid'] = array(
      'field' => 'vid',
      'table' => 'node',
      'alias' => 'node_vid',
    );
    $query->fields['node_data_field_job_session_date_time_field_session_job_nid_value'] = array(
      'field' => 'field_session_job_nid_value',
      'table' => 'node_data_field_job_session_date_time',
      'alias' => 'node_data_field_job_session_date_time_field_session_job_nid_value',
    );
    $query->fields['node_data_field_job_session_date_time_field_session_job_nid_value'] = array(
      'field' => 'field_session_job_nid_value',
      'table' => 'node_data_field_job_session_date_time',
      'alias' => 'node_data_field_job_session_date_time_field_session_job_nid_value',
    );
    $query->fields['node_data_field_job_session_date_time_field_job_session_crew_value'] = array(
      'field' => 'field_job_session_crew_value',
      'table' => 'node_data_field_job_session_date_time',
      'alias' => 'node_data_field_job_session_date_time_field_job_session_crew_value',
    );
    $query->fields['node_data_field_job_session_date_time_field_job_session_hours_value'] = array(
      'field' => 'field_job_session_hours_value',
      'table' => 'node_data_field_job_session_date_time',
      'alias' => 'node_data_field_job_session_date_time_field_job_session_hours_value',
    );

    $query->fields['node_data_field_job_session_date_time_field_call_crew_tbc_value'] = array(
      'field' => 'field_call_crew_tbc_value',
      'table' => 'node_data_field_job_session_date_time',
      'alias' => 'node_data_field_job_session_date_time_field_call_crew_tbc_value',
    );
    $query->fields['node_data_field_job_session_date_time_field_call_hours_tbc_value'] = array(
      'field' => 'field_call_hours_tbc_value',
      'table' => 'node_data_field_job_session_date_time',
      'alias' => 'node_data_field_job_session_date_time_field_call_hours_tbc_value',
    );



    $query->where = array();
    $query->where[0]['clauses'][0] = "node.type in ('%s')";
    $query->where[0]['args'][0] = 'job_session';
    $query->where[0]['type'] = "AND";

    // Date picker
    if (isset($_GET['date_filter'])) {
      $min = isset($_GET['date_filter']['min']['date']) ? $_GET['date_filter']['min']['date'] : '';
      $max = isset($_GET['date_filter']['max']['date']) ? $_GET['date_filter']['max']['date'] : '';
      if (!empty($min) && !empty($max)) {
        $query->where['date']['clauses'][] = "DATE_FORMAT(node_data_field_job_session_date_time.field_job_session_date_time_value, '%Y-%m-%%d') >= '$min' AND DATE_FORMAT(node_data_field_job_session_date_time.field_job_session_date_time_value, '%Y-%m-%%d') <= '$max'";
      } elseif (!empty($min) && empty($max)) { // ONLY MIN DATE IS SET
        $query->where['date']['clauses'][] = "DATE_FORMAT(node_data_field_job_session_date_time.field_job_session_date_time_value, '%Y-%m-%%d') >= '$min'";
      } elseif (!empty($max) && empty($min)) {  // ONLY MAX DATE IS SET
        $query->where['date']['clauses'][] = "DATE_FORMAT(node_data_field_job_session_date_time.field_job_session_date_time_value, '%Y-%m-%%d') <= '$max'";
      }
      if (!empty($min) || !empty($max)) {
        $query->where['date']['args'] = array();
        $query->where['date']['type'] = 'AND';
      }
    }
    // Job number (job) (textfield)
    if (isset($_GET['field_job_number_value']) && !empty($_GET['field_job_number_value'])) {
      $query->where[0]['clauses'][] = 'node_data_field_job_number.field_job_number_value = %d';
      $query->where[0]['args'][] = $_GET['field_job_number_value'];
    }
    // Client name (job) (select list)
    if (isset($_GET['field_job_client_name_value_many_to_one']) &&
      $_GET['field_job_client_name_value_many_to_one'] != 'All') {
      $query->where[0]['clauses'][] = 'node_data_field_job_number.field_job_client_name_value = %d';
      $query->where[0]['args'][] = $_GET['field_job_client_name_value_many_to_one'];
    }
    // Venue (call) (select list)
    if (isset($_GET['field_job_session_venue_value_many_to_one']) &&
      $_GET['field_job_session_venue_value_many_to_one'] != 'All') {
      $query->where[0]['clauses'][] = 'node_data_field_job_session_date_time.field_job_session_venue_value = %d';
      $query->where[0]['args'][] = $_GET['field_job_session_venue_value_many_to_one'];
    }
    // Status (job) (select list)
    if (isset($_GET['field_job_status_value_many_to_one']) &&
      $_GET['field_job_status_value_many_to_one'] != 'All') {
      // To be invoiced
      if ($_GET['field_job_status_value_many_to_one'] == 'tbi') {
        $query->where[0]['clauses'][] = 'node_data_field_job_number.field_job_status_value = 1 OR node_data_field_job_number.field_job_status_value = 3';
        $query->where[0]['args'][] = '';
      }
      // To be confirmed
      elseif ($_GET['field_job_status_value_many_to_one'] == 'tbc') {
        $query->where[0]['clauses'][] = 'node_data_field_job_session_date_time.field_call_time_tbc_value = 1 OR node_data_field_job_session_date_time.field_call_hours_tbc_value = 1 OR node_data_field_job_session_date_time.field_call_contract_tbc_value = 1 OR node_data_field_job_session_date_time.field_call_crew_tbc_value = 1';
        $query->where[0]['args'][] = '';
      }
      // else statuses
      else {
        $query->where[0]['clauses'][] = 'node_data_field_job_number.field_job_status_value = %d';
        $query->where[0]['args'][] = $_GET['field_job_status_value_many_to_one'];
      }
    }
    // PO number (job) (textfield)
    if (isset($_GET['field_job_po_number_value']) && !empty($_GET['field_job_po_number_value'])) {
      $query->where[0]['clauses'][] = "node_data_field_job_number.field_job_po_number_value = '%s'";
      $query->where[0]['args'][] = $_GET['field_job_po_number_value'];
    }
    // Invoice number (custom table) (textfield)
    if (isset($_GET['field_invoice_number_value']) && !empty($_GET['field_invoice_number_value'])) {
      $query->where[0]['clauses'][] = "aji.invoice_number = '%s'";
      $query->where[0]['args'][] = $_GET['field_invoice_number_value'];
    }

    $query->orderby = array();
    if (isset($_GET['order'])) {
      // Order by Job Number
      if ($_GET['order'] == 'field_session_callid_value') {
        if (!isset($_GET['sort']) || $_GET['sort'] == 'asc') {
          $query->orderby[] = 'field_session_callid_value ASC';
        } else {
          $query->orderby[] = 'field_session_callid_value DESC';
        }
      }
      // Job status
      if ($_GET['order'] == 'field_session_job_nid_value_1') {
        if (!isset($_GET['sort']) || $_GET['sort'] == 'asc') {
          $query->orderby[] = 'node_data_field_job_number.field_job_client_name_value ASC';
        } else {
          $query->orderby[] = 'node_data_field_job_number.field_job_client_name_value DESC';
        }
      }
      //
      if ($_GET['order'] == 'field_job_session_crew_value') {
        if (!isset($_GET['sort']) || $_GET['sort'] == 'asc') {
          $query->orderby[] = 'field_job_session_crew_value ASC';
        } else {
          $query->orderby[] = 'field_job_session_crew_value DESC';
        }
      }
      //
      if ($_GET['order'] == 'field_job_session_hours_value') {
        if (!isset($_GET['sort']) || $_GET['sort'] == 'asc') {
          $query->orderby[] = 'field_job_session_hours_value ASC';
        } else {
          $query->orderby[] = 'field_job_session_hours_value DESC';
        }
      }
    }

    /*
    // Change : LEFT JOIN drupal_content_type_job_session node_data_field_job_session_date_time
    //          ON node_data_field_job_number.vid = node_data_field_job_session_date_time.field_session_job_nid_value
    // To:      LEFT JOIN drupal_content_type_job_session node_data_field_job_session_date_time
    //          ON node.nid = node_data_field_job_session_date_time.nid
    $query->table_queue['node_data_field_job_session_date_time']['join']->definition['left_field'] = 'nid';
    $query->table_queue['node_data_field_job_session_date_time']['join']->definition['field'] = 'nid';
    $query->table_queue['node_data_field_job_session_date_time']['join']->left_field = 'nid';
    $query->table_queue['node_data_field_job_session_date_time']['join']->field = 'nid';

    // Change : LEFT JOIN drupal_content_type_job node_data_field_job_number
    //          ON node.vid = node_data_field_job_number.vid
    // To :     LEFT JOIN drupal_content_type_job node_data_field_job_number
    //          ON node_data_field_job_session_date_time.field_session_job_nid_value = node_data_field_job_number.nid
    $query->table_queue['node_data_field_job_number']['join']->definition['left_table'] = 'content_type_job_session';
    $query->table_queue['node_data_field_job_number']['join']->left_table = 'node_data_field_job_session_date_time';
    $query->table_queue['node_data_field_job_number']['join']->definition['left_field'] = 'field_session_job_nid_value';
    $query->table_queue['node_data_field_job_number']['join']->left_field = 'field_session_job_nid_value';
    $query->table_queue['node_data_field_job_number']['join']->definition['field'] = 'nid';
    $query->table_queue['node_data_field_job_number']['join']->field = 'nid';
    //$query->table_queue['node_data_field_job_number']['relationship'] = 'node_data_field_job_session_date_time';

    $call_data = array_pop($query->table_queue);
    $job_data = array_pop($query->table_queue);
    $query->table_queue['node_data_field_job_session_date_time'] = $call_data;
    $query->table_queue['node_data_field_job_number'] = $job_data;

    $call_data = array_pop($query->tables['node']);
    $job_data = array_pop($query->tables['node']);
    $query->tables['node']['node_data_field_job_session_date_time'] = $call_data;
    $query->tables['node']['node_data_field_job_number'] = $job_data;
    */
  }

}

function op_custom_client_before_submit($form, &$form_state) {
  //watchdog('cl_bef', '<pre>'.print_r($form_state, TRUE).'</pre>');
  
  $nid = $form_state['values']['nid'];
  variable_set('is_client_editing_'.$nid, TRUE);
  $before_items = acecrew_client_contracts_getItems($nid);
  //watchdog('it', '<pre>'.print_r($before_items, TRUE).'</pre>');
  $_SESSION['contact_before_items'] = $before_items;  
}

function op_custom_client_after_submit($form, &$form_state) {
  //watchdog('c_i', '<pre>'.print_r($_SESSION['contact_items'], TRUE).'</pre>');
  //watchdog('cl_aft', '<pre>'.print_r('yes', TRUE).'</pre>');

  $nid = $form_state['values']['nid'];
  //
  $before_items = $_SESSION['contact_before_items'];
  $after_items  = acecrew_client_contracts_getItems($nid);  
  $result_items = array();
  foreach ($after_items as $after_item) {
    foreach ($before_items as $before_item) {
      if ( (!empty($before_item['name']) && !empty($after_item['name']) && $after_item['name'] == $before_item['name']) ||      
      ( !empty($before_item['email']) && !empty($after_item['email']) && $after_item['email'] == $before_item['email']) ||
        ( !empty($before_item['mobile']) && !empty($after_item['mobile']) && $after_item['mobile'] == $before_item['mobile']) ) {
        $result_items[$before_item['item_id']] = $after_item['item_id'];
        break;
      }
    }
  }
  //watchdog('b_i', '<pre>'.print_r($before_items, TRUE).'</pre>');
  //watchdog('a_i', '<pre>'.print_r($after_items, TRUE).'</pre>');
  //watchdog('r_i', '<pre>'.print_r($result_items, TRUE).'</pre>');
  //
  //return;
  foreach ($result_items as $old_item_id => $new_item_id) {
    // job
    db_query('UPDATE {content_type_job} SET field_job_client_contact_value = %d WHERE field_job_client_contact_value = %d', $new_item_id, $old_item_id);
    db_query('UPDATE {content_type_job} SET field_job_client_contact_second_value = %d WHERE field_job_client_contact_second_value = %d', $new_item_id, $old_item_id);
    // job call
    db_query('UPDATE {content_type_job_session} SET field_call_contact_value = %d WHERE field_call_contact_value = %d', $new_item_id, $old_item_id);
    db_query('UPDATE {content_type_job_session} SET field_call_contact_second_value = %d WHERE field_call_contact_second_value = %d', $new_item_id, $old_item_id);
  }
  //
  unset($_SESSION['contact_items']);
  drupal_flush_all_caches();
  variable_set('is_client_editing_'.$nid, FALSE);
  drupal_set_message('cache flushed.');
}

function op_custom_client_duplicate_venue_submit($form, &$form_state) {  
  $client = $form_state['values']; 
  
  $venue_nid = db_result(db_query("SELECT nid FROM {content_type_venue} WHERE field_venue_name_value = '%s'", $client['field_client_name'][0]['value']));  
  if (!empty($venue_nid)) {
    $venue = node_load($venue_nid);        
  } else {    
    $venue = new StdClass();
    $venue->title = $client['title'];
    $venue->type = 'venue';
    $venue->field_venue_name[0]['value'] = $client['field_client_name'][0]['value'];
  }
  $venue->field_venue_address[0]['value'] = $client['field_client_company_address'][0]['value'];
  $venue->field_venue_post_code[0]['value'] = $client['field_client_company_postcode'][0]['value'];  

  node_save($venue);

  drupal_set_message('Venue has been duplicated. Check updates '. l('here', 'node/'.$venue->nid.'/edit'));
}

function acecrew_client_contracts_getItems($nid) {
  $result = db_query('SELECT field_client_contact_value, field_client_contact_item_id FROM {content_field_client_contact} WHERE nid = %d AND field_client_contact_type = "client_contact"', $nid);

  $items = array();
  while ($data = db_fetch_array($result)) {
    $item = array();
    $item['item_id']  = $data['field_client_contact_item_id'];
    $details          = unserialize($data['field_client_contact_value']);
    $item['name']     = $details['field_client_contact_name'][0]['value'];
    $item['email']    = $details['field_client_contact_email'][0]['email'];
    $item['mobile']   = $details['field_client_contact_mobile'][0]['value'];
    $items[]    = $item;
  }

  return $items;
}

function op_custom_allocate_skills_form($form_state) {
  drupal_set_title('Allocate skills');
  $form = array();

  $form['create_columns'] = array(
    '#type' => 'submit',
    '#value' => 'Create columns',
  );
  $form['remove_columns'] = array(
    '#type' => 'submit',
    '#value' => 'Remove columns',
  );
  $form['fill_columns'] = array(
    '#type' => 'submit',
    '#value' => 'Fill columns',
  );

  return $form;
}

function op_custom_allocate_skills_form_submit($form, &$form_state) {
  $button_type = &$form_state['clicked_button']['#parents'][0];
  $ret = array();
  if ($button_type == 'create_columns') {
    drupal_set_message('create_columns');
    db_add_field($ret, 'crew_call', 'pay_default_2h', array('type' => 'float', 'default' => 0));
    db_add_field($ret, 'crew_call', 'pay_default_3h', array('type' => 'float', 'default' => 0));
    drupal_set_message(t("'pay_default_2h' and 'pay_default_3h' have been created for 'crew_call' table"));
    //drupal_set_message($ret);
  }
  elseif ($button_type == 'remove_columns') {
    drupal_set_message('remove_columns');
    db_drop_field($ret, 'crew_call', 'pay_default_2h');
    db_drop_field($ret, 'crew_call', 'pay_default_3h');
    drupal_set_message(t("'pay_default_2h' and 'pay_default_3h' have been removed from 'crew_call' table"));
    //drupal_set_message($ret);
  }
  elseif ($button_type == 'fill_columns') {
    drupal_set_message('fill_columns');
    $result = db_query('SELECT cc.uid, cc.jsid, ctjs.nid, ctjs.field_job_session_hours_value AS call_hours FROM `drupal_crew_call` cc INNER JOIN `drupal_content_type_job_session` ctjs ON cc.jsid = ctjs.vid WHERE cc.uid IN (240)');
    while ($row = db_fetch_object($result)) {
      drupal_set_message('nid:'.$row->nid.', c_hours:'.$row->call_hours);
      if ($row->call_hours == 2) {
        $crew = user_load($row->uid);
        $hour_default_2h = $crew->profile_2_hour_default;
        db_query('UPDATE {crew_call} SET pay_default_2h = %f WHERE uid = %d AND jsid = %d', $hour_default_2h, $row->uid, $row->jsid);
      }
      else if ($row->call_hours == 3) {
        $crew = user_load($row->uid);
        $hour_default_3h = $crew->profile_3_hour_default;
        db_query('UPDATE {crew_call} SET pay_default_3h = %f WHERE uid = %d AND jsid = %d', $hour_default_3h, $row->uid, $row->jsid);
      }

      //$3_hour_default = $crew->profile_3_hour_default;
      //watchdog('crew', '<pre>'.print_r($crew, TRUE).'</pre>');
    }
  }
}

function op_custom_invoice_update_form(&$form_state) {
  drupal_set_title('Invoice update');
  //drupal_set_message('<pre>'.print_r($form_state, TRUE).'</pre>');
  $form = array();

  $form['job_number'] = array(
    '#type' => 'textfield',
    '#default_value' => isset($form_state['post']['job_number']) ? $form_state['post']['job_number'] : '',
    '#required' => TRUE,
    '#title' => t('Job Number'),    
  );
  $form['invoice_number'] = array(
    '#type' => 'textfield',
    '#default_value' => '',
    '#required' => FALSE,
    '#title' => t('Invoice Number'),
    '#description' => t('update Invoice Number by Job Number'),    
  );
  
  $form['results'] = array(
    '#type' => 'markup',
    '#value' => '<div id="results">None</div>',
  );

  $form['open'] = array(
    '#type' => 'markup',
    '#value' => '<a href="javascript:void(0)" onclick="Drupal.modalFrame.open({url: \'/admin/invoice-update/popup/5/\', onSubmit: function() {console.log(\'subm\');}, width: 700,

height: 500})">'.'Open'.'</a>',
  );

  $form['check'] = array(
    '#type' => 'submit',
    '#value' => 'Check',
  );
  $form['update'] = array(
    '#type' => 'submit',
    '#value' => 'Update',    
  );

  $form['#validate'][] = 'op_custom_invoice_update_form_validate';

  return $form;
}

function op_custom_invoice_update_popup_form($form_state, $job_id) {
  $form = array();
  modalframe_child_js();

  $form['contracts'] = array(
    '#title' => 'Contacts',
    '#type' => 'textfield',
    '#default_value' => 'Hello world',
    //'#options' => $names,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send review'),
  );

  return $form;
}

function op_custom_invoice_update_popup_form_submit($form, &$form_state) {
  ctools_include('modal');
  ctools_include('ajax');
  ctools_include('wizard');

  $contracts = $form_state['values']['contracts'];

  $commands[] = ctools_ajax_command_html('#results', $contracts);
  $commands[] = ctools_modal_command_dismiss();

  
  // Tell the parent window to close the modal frame dialog.
  modalframe_close_dialog();
  ctools_ajax_render($commands);
}

function op_custom_invoice_update_form_validate($form, &$form_state) {
  $button_type = &$form_state['clicked_button']['#parents'][0]; 
  if ($button_type == 'update') {
  
  }
}

function op_custom_invoice_update_form_submit($form, &$form_state) {  
  $job_number     = $form_state['values']['job_number'];
  $invoice_number = $form_state['values']['invoice_number'];
  
  $button_type = &$form_state['clicked_button']['#parents'][0];  
  if ($button_type == 'check') {
    $invoice = db_result(db_query('SELECT invoice_number FROM {acecrew_job_invoices} WHERE job_id = "%s"', $job_number));
    drupal_set_message('Invoice Number: '. $invoice);
  } elseif ($button_type == 'update') {    
    db_query('UPDATE {acecrew_job_invoices} SET invoice_number = %d WHERE job_id = "%s"', $invoice_number, $job_number);
    drupal_set_message('Invoice Number has been updated');
  }

}

function op_custom_jobs_client_form($form_state) {
  $client_is_locked = variable_get('is_client_editing_106', FALSE);
  unset($_SESSION['messages']['status']);
  drupal_set_message('client_id = 106 is locked: '. $client_is_locked);
  $form['lock_client'] = array(
    '#type' => 'submit',
    '#value' => 'Lock client',
    '#submit' => array('op_custom_jobs_client_form_lock_submit'),
  ); 
  $form['unlock_client'] = array(
    '#type' => 'submit',
    '#value' => 'Unlock client',
    '#submit' => array('op_custom_jobs_client_form_unlock_submit'),
  ); 

  return $form;
}

function op_custom_jobs_client_form_lock_submit($form, &$form_state) {
  variable_set('is_client_editing_106', TRUE);
}

function op_custom_jobs_client_form_unlock_submit($form, &$form_state) {
  variable_set('is_client_editing_106', FALSE);
}

function op_custom_jobs_venue_form($form_state) {
  $form = array();
  drupal_add_js(drupal_get_path('module', 'op_custom') . '/js/client_checker.js');
  drupal_add_js(array('jobNid' => 12776), 'setting');
  $form['nid'] = array(
    '#type' => 'textfield',
    '#default_value' => '',
    '#title' => t('Title'),
    '#description' => t(''),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save',
  );

  $form['save_call'] = array(
    '#type' => 'submit',
    '#value' => 'Save Call',
  );  

  return $form;
}

function op_custom_jobs_venue_form_submit($form, &$form_state) {  
  drupal_set_message('call has been saved');
}

function op_get_call_hours_by_vid($call_vid) {
  $hours = db_result(db_query('SELECT field_job_session_hours_value FROM {content_type_job_session} WHERE vid = %d', $call_vid));
    
  return $hours;
}

function op_jobs_venue_autocomplete($input) {
  $results = array();
/*
  $results['1'] = 'hello1:'.$input;
  $results['2'] = 'hello2:'.$input;
  $results['3'] = 'hello3:'.$input;
*/

  $resource = db_query_range("SELECT nid, title FROM {node} WHERE title LIKE '%s%%'", $input, 0, 10);

  while ($node = db_fetch_object($resource)) {
    $key = sprintf('%s [nid: %d]', $node->title, $node->nid);
    $results[$key] = $node->title;
  }

  print json_encode($results);
  exit();
}

function op_custom_ajax_client_account($client_name = '') {
  //$client_name = trim($client_name);
  if (isset($_GET['client_name'])) {
    $client_name = trim($_GET['client_name']);
  }
  $status = false;
  if (!empty($client_name)) {
    $data = db_fetch_object(db_query('SELECT ctc.nid, ctc.field_credit_limit_box_value AS account_limit  FROM {content_type_client} ctc WHERE ctc.field_client_name_value = "%s"', $client_name));
    if (!empty($data->account_limit) && $data->account_limit > 0) {
      $status = true;
    }
    $nid = $data->nid;
  }

  print json_encode(array('client_name' => $client_name, 'status' => $status, 'client_nid' => $nid));
  exit;
}

function op_custom_ajax_client_id_by_name($client_name = '') {
  //$client_name = trim($client_name);
  if (isset($_GET['client_name'])) {
    $client_name = trim($_GET['client_name']);
  }
  $status = false;
  if (!empty($client_name)) {
    $data = db_fetch_object(db_query('SELECT ctc.nid FROM {content_type_client} ctc WHERE ctc.field_client_name_value = "%s"', $client_name));
    $nid = $data->nid;
  }

  print json_encode(array('client_name' => $client_name, 'client_nid' => $nid));
  exit;
}

function op_custom_ajax_client_call_is_blocked_crew($call_vid = '', $crew_id = '') {    
  $is_not_blocked = db_result(db_query('SELECT COUNT(*) 
    FROM `drupal_content_type_job_session` c 
    INNER JOIN `drupal_content_type_job` j ON c.field_session_job_nid_value = j.nid 
    INNER JOIN `drupal_content_type_client` cl ON j.field_job_client_name_value = cl.field_client_id_value
    INNER JOIN `drupal_content_field_blocked_crews` bc ON cl.nid = bc.nid
    WHERE c.vid = %d AND bc.field_blocked_crews_uid = %d', $call_vid, $crew_id));  

  print json_encode(array('is_blocked' => !$is_not_blocked));
  exit;
}

function op_custom_ajax_venue_call_is_blocked_crew($call_vid = '', $crew_id = '') {  
  $is_not_blocked = db_result(db_query('SELECT COUNT(*) 
    FROM `drupal_content_type_job_session` c 
    INNER JOIN `drupal_content_type_job` j ON c.field_session_job_nid_value = j.nid 
    INNER JOIN `drupal_content_type_venue` v ON j.field_job_venue_value = v.field_venue_id_value
    INNER JOIN `drupal_content_field_blocked_crews` bc ON v.nid = bc.nid
    WHERE c.vid = %d AND bc.field_blocked_crews_uid = %d', $call_vid, $crew_id));  

  print json_encode(array('is_blocked' => !$is_not_blocked));
  exit;
}

function acecrew_get_client_name($client_id) {
  $client_name = db_result(db_query("SELECT field_client_name_value 
    FROM {content_type_client} 
    WHERE field_client_id_value = %d", $client_id));

  return $client_name;
}

function acecrew_get_client_id_by_job_id($job_nid) {
  $client_id = db_result(db_query("SELECT c.field_client_id_value 
    FROM {content_type_client} c INNER JOIN {content_type_job} j 
    ON c.field_client_id_value = j.field_job_client_name_value
    WHERE j.nid = %d", $job_nid));

  return $client_id;
}

function acecrew_get_client_nid_by_client_id($client_id) {
  $client_nid = db_result(db_query('SELECT nid FROM {content_type_client} WHERE field_client_id_value = %d', $client_id));
  return $client_nid;
}

function acecrew_get_client_id_by_client_nid($client_nid) {
  $client_id = db_result(db_query('SELECT field_client_id_value FROM {content_type_client} WHERE nid = %d', $client_nid));
  return $client_id;
}

function acecrew_get_client_id_by_call_id($call_id) {
  $client_id = db_result(db_query("SELECT c.field_client_id_value 
    FROM {content_type_client} c 
    INNER JOIN {content_type_job} j ON c.field_client_id_value = j.field_job_client_name_value
    INNER JOIN {content_type_job_session} js ON j.nid = js.field_session_job_nid_value
    WHERE js.nid = %d", $call_id));

  return $client_id;
}

function acecrew_client_is_credit_exists($client_id) {
  $status = false;
  $credit_limit = db_result(db_query('
    SELECT ctc.field_credit_limit_box_value 
    FROM {content_type_client} ctc 
    WHERE ctc.field_client_id_value = %d', $client_id));

  if (!empty($credit_limit) && $credit_limit > 0) {
    $status = true;
  }

  return $status;
}

/**
 * Action: Executes after Job has been saved
 */
function acercrew_rule_job_crews_status_revert($job) {
  $job_nid = $job->nid;
  //watchdog('job-crews-rev', '<pre>'.print_r($job_nid, TRUE).'</pre>');
  $calls = acecrew_get_calls_by_job($job_nid);
  foreach ($calls as $call_nid) {
    acecrew_set_crews_status_by_call($call_nid);
  }
}

function acecrew_set_crews_status_by_call($call_nid, $status = "text_not_sent") {
  $result = db_query('SELECT cc.uid, cc.jsid FROM `drupal_crew_call` cc INNER JOIN `drupal_node` c ON cc.jsid = c.vid WHERE c.nid = %d', $call_nid);
  if (db_affected_rows($result) > 0) {
    while ($row = db_fetch_object($result)) {
        db_query('UPDATE `drupal_crew_call` SET supplements = "%s" WHERE uid = %d AND jsid = %d', $status, $row->uid, $row->jsid);
    }
  }
}

function acecrew_set_crew_call_status($uid, $call_id, $status = "text_not_sent") {
  db_query('UPDATE `drupal_crew_call` SET supplements = "%s" WHERE uid = %d AND jsid = %d', $status, $uid, $call_id);
}

function acecrew_get_calls_by_job($job_nid) {
  $result = db_query('SELECT nid FROM `drupal_content_type_job_session` WHERE field_session_job_nid_value = %d', $job_nid);
  $data = array();
  while ($row = db_fetch_object($result)) {
    $data[] = $row->nid;
  }

  return $data;
}

/**
 * Action: Executes after Call has been saved
 */
function acercrew_rule_call_crews_status_revert($call) {
  $call_nid = $call->nid;
  //watchdog('call-crews-rev', '<pre>'.print_r($call_nid, TRUE).'</pre>');
  acecrew_set_crews_status_by_call($call_nid);
}


function acecrew_get_max_call_parsed_by_jobid($job_id) {
  $query = "SELECT field_job_number_value AS job_number, MAX(CONVERT(SUBSTRING_INDEX(js.field_session_callid_value,'-',-1),UNSIGNED INTEGER)) max FROM `drupal_content_type_job_session` js 
  INNER JOIN `drupal_content_type_job` j ON js.field_session_job_nid_value = j.nid
  WHERE js.field_session_job_nid_value = %d";
  $data = db_fetch_array(db_query($query, $job_id));

  return $data;
}
/**
 * [acecrew_is_call_exists description]
 * @param  [type] $job_id   [description]
 * @param  [type] $datatime 'Y-m-d H:i:s'
 * @return [type]           [description]
 */
function acecrew_is_call_exists($job_id, $datatime) {
  $query = "SELECT COUNT(*) FROM `drupal_content_type_job_session` js 
  WHERE js.field_session_job_nid_value = %d AND js.field_job_session_date_time_value = '%s'";
  $is_exists = db_result(db_query($query, $job_id, $datatime));

  return $is_exists;
}

function acecrew_ajax_check_bookoff_by_date($date = '') {  
  $crews = acecrew_get_bookoff_crews($date);
  $crews_count = sizeof($crews);
  $message = '';
  if ($crews_count >= BOOKOFF_DAILY_CREWS_COUNT) {
    foreach ($crews as $crew) {
      $message .= $crew['name'];
      if (isset($crew['time'])) {
        $message .= ' ('.$crew['time'].')';
      }
      $message .= "\n";
    }
  }
    
  print json_encode(array('crews_count' => $crews_count, 'max_crews_count' => BOOKOFF_DAILY_CREWS_COUNT, 'message' => $message));
  exit;
}

function acecrew_get_bookoff_crews($date, $uid = '') {
  $uid_condition = !empty($uid) ? 'AND ub.field_ub_owner_uid = %d' : '';

  $query = "SELECT ub.field_ub_label_value AS label, ub.field_comment_box_value AS comment, ub.field_ub_owner_uid AS crew_uid, u.name AS crew_name, DATE(ub.field_ub_date_start_value) AS date_start, DATE(ub.field_ub_date_end_value) AS date_end, TIME(ub.field_ub_date_start_value) AS time_start, TIME(ub.field_ub_date_end_value) AS time_end
  FROM `drupal_content_type_user_bookedoff` ub
  INNER JOIN `drupal_users_roles` ur ON ur.uid = ub.field_ub_owner_uid
  INNER JOIN `drupal_users` u ON ub.field_ub_owner_uid = u.uid
  WHERE '%s' BETWEEN DATE(ub.field_ub_date_start_value) AND DATE(ub.field_ub_date_end_value) $uid_condition
  AND ur.rid = 5  
  ORDER BY u.name ASC";
  if (!empty($uid)) {
    $result = db_query($query, $date, $uid);
  } else {
    $result = db_query($query, $date); // GROUP BY ub.field_ub_owner_uid
  }
  $crews = array();
  while ($crew = db_fetch_object($result)) {
    $crews[] = $crew;
  }  

  /**
   * $bookoff_grouped_crews = array(
   *     123 => array(
   *         'name' => 'Crew name',
   *         'time' => array('') // if empty - All day, if 1+ elements - time ranges in format array('09:00 - 11:30', '17:00 - 19:30')
   *     ),
   *     35 => array(
   *     
   *     ),
   *     456 => array(
   *     
   *     )
   * )
   */    
  $bookoff_grouped_crews = array();
  foreach ($crews as $crew) {
      $bookoff_grouped_crews[$crew->crew_uid]['name'] = $crew->crew_name;
      $bookoff_grouped_crews[$crew->crew_uid]['label'] = $crew->label;
      $bookoff_grouped_crews[$crew->crew_uid]['comment'] = $crew->comment;
      if ($crew->date_start == $crew->date_end) {
          $time_start = date('H:i', strtotime($crew->time_start));
          $time_end   = date('H:i', strtotime($crew->time_end));                    
          if (!isset($bookoff_grouped_crews[$crew->crew_uid]['time'])) {
              $bookoff_grouped_crews[$crew->crew_uid]['time'] = array();
          }
          //$bookoff_grouped_crews[$crew->crew_uid]['time'][] = $time_start . ' - ' . $time_end;
          array_unshift($bookoff_grouped_crews[$crew->crew_uid]['time'], $time_start . ' - ' . $time_end);
      }            
  }

  return $bookoff_grouped_crews;
}

/**
 * Is used for calculating Total Sum
 * @param  [type] $price       [description]
 * @param  [type] $call_status [description]
 * @return [type]              [description]
 */
function acecrew_cancellation_price_total($price, $call_cancellation_status = CANCELLATION_NA, $job_cancellation_status = CANCELLATION_NA) {  
  $cancellation_status = $job_cancellation_status;
  if ($call_cancellation_status != CANCELLATION_NA) {
    $cancellation_status = $call_cancellation_status;
  } 

  // half totals for >24hrs&<12hrs
  if ($cancellation_status == CANCELLATION_24HOURS_LESS_NOTICE) {
    return ($price / 2);
  } 
  // exclude >24hrs variant - it should be absent for Total Sum
  elseif ($cancellation_status == CANCELLATION_24HOURS_MORE_NOTICE) {
    return 0;
  } 
  else {
    return $price;
  }
}

/**
 * Return TRUE if passed cancellation status 
 * is "<12hrs or <24hrs" notice type
 * @param  string $cancellation_status 
 * @return boolean
 */
function acecrew_is_cancellation_notice($cancellation_status) {
  return $cancellation_status == CANCELLATION_24HOURS_LESS_NOTICE ||
    $cancellation_status == CANCELLATION_12HOURS_LESS_NOTICE;
}

/**
 * Is used for displaying cell prices
 * @param  [type] $price       [description]
 * @param  [type] $type        [description]
 * @param  [type] $call_status [description]
 * @param  [type] $job_status  [description]
 * @return [type]              [description]
 */
function acecrew_cancellation_price($price, $type, $call_cancellation_status = CANCELLATION_NA, $job_cancellation_status = CANCELLATION_NA) {  
  if (in_array($type, array('including_vat', 'excluding_vat', 'vat'))) {
    return $price;
  }

  $cancellation_status = $job_cancellation_status;
  if ($call_cancellation_status != CANCELLATION_NA) {
    $cancellation_status = $call_cancellation_status;
  } 

  if ($cancellation_status == CANCELLATION_NORMAL && $type == 'total') {
    return 0;
  } elseif ($cancellation_status == CANCELLATION_24HOURS_LESS_NOTICE) {
    return $price / 2;
  } else {
    return $price; 
  }
}

function acecrew_get_hours_by_crew($crew_uid, $call_number = '6075-1', $str_result = TRUE) {   
  $timezone = 'UTC';
  // get call date
  $current_date = db_result(db_query('
    SELECT DATE(field_job_session_date_time_value)
    FROM {content_type_job_session} 
    WHERE field_session_callid_value = "%s"', 
    $call_number));  
  // turn call date to timestamp
  $current_time = strtotime($current_date . ' 00:00');
  // get day number 1 - Monday, 2 - Tuesday, ... 7 - Sunday  
  $day_number = ((date("w", $current_time) + 6) % 7);
  // generate temporary current_to = call_date
  $current_week_date_to = $current_day = date('Y-m-d', $current_time);    
  // generate current_from
  $current_week_date_from = date_make_date($current_day . ' 00:00', $timezone);
  date_modify($current_week_date_from, '-'.($day_number).' days');  
  $current_week_date_from = date_format($current_week_date_from, 'Y-m-d');
  // last_to
  $last_week_date_to = date_make_date($current_day . ' 00:00', $timezone);
  date_modify($last_week_date_to, '-'.($day_number + 1).' days');
  $last_week_date_to = date_format($last_week_date_to, 'Y-m-d');
  // last_from
  $last_week_date_from = date_make_date($current_day . ' 00:00', $timezone);
  date_modify($last_week_date_from, '-'.($day_number + 7).' days');
  $last_week_date_from = date_format($last_week_date_from, 'Y-m-d');
  // generate current_to = call_date - last day of the week  
  $current_week_date_to = date_make_date($current_week_date_to, $timezone);
  date_modify($current_week_date_to, (6 - $day_number).' days');
  $current_week_date_to = date_format($current_week_date_to, 'Y-m-d');

  //drupal_set_message('current_week_date_from = ' . $current_week_date_from);
  //drupal_set_message('current_week_date_to = ' . $current_week_date_to);
  //drupal_set_message('last_week_date_from = ' . $last_week_date_from);
  //drupal_set_message('last_week_date_to = ' . $last_week_date_to);  

  $current_hours = acecrew_get_crew_hours_by_date($crew_uid, $current_week_date_from, $current_week_date_to);
  $last_hours = acecrew_get_crew_hours_by_date($crew_uid, $last_week_date_from, $last_week_date_to);
  //drupal_set_message('<pre>'.print_r($current_hours, TRUE).'</pre>');
  //drupal_set_message('<pre>'.print_r($last_hours, TRUE).'</pre>');

  if ($str_result) {
    return t('(!last_week_hours, !current_week_hours)', 
      array(
        '!last_week_hours' => $last_hours, 
        '!current_week_hours' => $current_hours
      )
    );
  } else {
    return array(
      'last_week_hours' => $last_hours, 
      'current_week_hours' => $current_hours
    );
  } 
}

function acecrew_get_crew_hours_by_date($crew_uid, $date_from, $date_to) {
  $date_from .= ' 00:00';
  $date_to   .= ' 23:59';
  //$hours_count 
  $result = db_result(db_query("SELECT SUM(js.field_job_session_hours_value)
    FROM `drupal_content_type_job_session` js 
    INNER JOIN `drupal_crew_call` cc ON js.vid = cc.jsid
    WHERE cc.uid = %d AND js.field_job_session_date_time_value BETWEEN '%s' AND '%s'", $crew_uid, $date_from, $date_to));   

  $result = !empty($result) ? $result : 0;

  return $result;
}

/**
 * Updates cck field from Integer to Decimal. Takes data
 * of another existing decimal field ([field_fine_rate_amount] by default)
 * @param  [type] $field_name     [description]
 * @param  [type] $table_name     [description]
 * @param  string $decimal_field_name Name of decimal field from which 
 * the decimal settings will be taken for our field
 * @return [type]                 [description]
 */
function acecrew_update_cck_field_type($old_type_field_name, $table_name, $new_column_type = 'decimal', $new_type_sample_field_name = 'field_fine_rate_amount') {
  // we will copy decimal settings from another decimal field
  $new_type_sample_field_data = db_fetch_array(db_query('SELECT * 
                                  FROM {content_node_field} 
                                  WHERE field_name = "%s"', 
                                  $new_type_sample_field_name));

  // we will copy decimal settings from another decimal field instance
  $new_type_sample_field_instance_data = db_fetch_array(db_query('SELECT * 
                                  FROM {content_node_field_instance} 
                                  WHERE field_name = "%s"', 
                                  $new_type_sample_field_name));
  
  // update field in content_node_field table with existing 
  // data of another decimal field
  db_query('UPDATE {content_node_field} 
    SET type = "%s", 
    global_settings = "%s", 
    db_columns = "%s"
    WHERE field_name = "%s"', 
    $new_type_sample_field_data['type'],
    $new_type_sample_field_data['global_settings'],
    $new_type_sample_field_data['db_columns'],
    $old_type_field_name
  );
  
  // update field in content_node_field_istance table with
  // existing data of another decimal field
  db_query('UPDATE {content_node_field_instance} 
    SET display_settings = "%s"
    WHERE field_name = "%s"', 
    $new_type_sample_field_instance_data['display_settings'],
    $old_type_field_name
  );
  
  $ret = array();
  $field_name = $old_type_field_name . '_value';
  
  $column_type = array();
  if ($new_column_type == 'decimal') {
    $column_type = array(
      'type' => 'numeric', 
      'precision' => 10, 
      'scale' => 2, 
      'not null' => FALSE
    );
  } elseif ($new_column_type == 'integer') {
    $column_type = array(
      'type' => 'int', 
      'unsigned' => TRUE, 
      'not null' => FALSE, 
      'default' => 0
    );
  }
  db_change_field($ret, $table_name, $field_name, $field_name, $column_type);      
}

function op_custom_ajax_client_comment($value, $type) {
  $comment = '';
  if (empty($value)) {
    return $comment;
  }

  if ($type == 'name') {    
    $comment = db_result(db_query('SELECT IF(ctc.field_client_job_call_cb_value IS NULL , "", ctc.field_client_job_call_cb_value) AS comment FROM {content_type_client} ctc WHERE ctc.field_client_name_value = "%s"', $value));        
  } elseif ($type == 'job') {
    $comment = db_result(db_query('SELECT IF(ctc.field_client_job_call_cb_value IS NULL , "", ctc.field_client_job_call_cb_value) AS comment FROM {content_type_client} ctc INNER JOIN {content_type_job} ctj ON ctc.field_client_id_value = ctj.field_job_client_name_value WHERE ctj.nid = %d', $value));        
  }   

  if (!empty($comment)) {
    $comment = 'Client:'.$comment;
  }

  print json_encode(array('comment' => $comment));
  exit;
}

function op_custom_ajax_venue_comment($value, $type = 'name') {  
  $comment = '';
  if (empty($value)) {
    return $comment;
  }

  if ($type == 'name') {    
    $comment = db_result(db_query('SELECT IF(ctv.field_venue_job_call_cb_value IS NULL , "", ctv.field_venue_job_call_cb_value) AS comment FROM {content_type_venue} ctv WHERE ctv.field_venue_name_value = "%s"', $value));          
  }

  if (!empty($comment)) {
    $comment = 'Venue:'.$comment;
  }

  print json_encode(array('comment' => $comment));
  exit;
}
